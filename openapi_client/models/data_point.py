# coding: utf-8

"""
    Toolbox WebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataPoint(BaseModel):
    """
    DataPoint
    """ # noqa: E501
    data_type: Optional[StrictStr] = Field(default=None, alias="DataType")
    rigid_path: Optional[StrictStr] = Field(default=None, alias="RigidPath")
    endpoint: Optional[StrictStr] = Field(default=None, alias="Endpoint")
    meta_data: Optional[List[StrictStr]] = Field(default=None, alias="MetaData")
    value: Optional[StrictStr] = Field(default=None, alias="Value")
    qualifier: Optional[StrictStr] = Field(default=None, alias="Qualifier")
    min_value: Optional[StrictStr] = Field(default=None, alias="MinValue")
    min_qualifier: Optional[StrictStr] = Field(default=None, alias="MinQualifier")
    max_value: Optional[StrictStr] = Field(default=None, alias="MaxValue")
    max_qualifier: Optional[StrictStr] = Field(default=None, alias="MaxQualifier")
    unit: Optional[StrictStr] = Field(default=None, alias="Unit")
    family: Optional[StrictStr] = Field(default=None, alias="Family")
    __properties: ClassVar[List[str]] = ["DataType", "RigidPath", "Endpoint", "MetaData", "Value", "Qualifier", "MinValue", "MinQualifier", "MaxValue", "MaxQualifier", "Unit", "Family"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_type (nullable) is None
        # and model_fields_set contains the field
        if self.data_type is None and "data_type" in self.model_fields_set:
            _dict['DataType'] = None

        # set to None if rigid_path (nullable) is None
        # and model_fields_set contains the field
        if self.rigid_path is None and "rigid_path" in self.model_fields_set:
            _dict['RigidPath'] = None

        # set to None if endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.endpoint is None and "endpoint" in self.model_fields_set:
            _dict['Endpoint'] = None

        # set to None if meta_data (nullable) is None
        # and model_fields_set contains the field
        if self.meta_data is None and "meta_data" in self.model_fields_set:
            _dict['MetaData'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['Value'] = None

        # set to None if qualifier (nullable) is None
        # and model_fields_set contains the field
        if self.qualifier is None and "qualifier" in self.model_fields_set:
            _dict['Qualifier'] = None

        # set to None if min_value (nullable) is None
        # and model_fields_set contains the field
        if self.min_value is None and "min_value" in self.model_fields_set:
            _dict['MinValue'] = None

        # set to None if min_qualifier (nullable) is None
        # and model_fields_set contains the field
        if self.min_qualifier is None and "min_qualifier" in self.model_fields_set:
            _dict['MinQualifier'] = None

        # set to None if max_value (nullable) is None
        # and model_fields_set contains the field
        if self.max_value is None and "max_value" in self.model_fields_set:
            _dict['MaxValue'] = None

        # set to None if max_qualifier (nullable) is None
        # and model_fields_set contains the field
        if self.max_qualifier is None and "max_qualifier" in self.model_fields_set:
            _dict['MaxQualifier'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['Unit'] = None

        # set to None if family (nullable) is None
        # and model_fields_set contains the field
        if self.family is None and "family" in self.model_fields_set:
            _dict['Family'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DataType": obj.get("DataType"),
            "RigidPath": obj.get("RigidPath"),
            "Endpoint": obj.get("Endpoint"),
            "MetaData": obj.get("MetaData"),
            "Value": obj.get("Value"),
            "Qualifier": obj.get("Qualifier"),
            "MinValue": obj.get("MinValue"),
            "MinQualifier": obj.get("MinQualifier"),
            "MaxValue": obj.get("MaxValue"),
            "MaxQualifier": obj.get("MaxQualifier"),
            "Unit": obj.get("Unit"),
            "Family": obj.get("Family")
        })
        return _obj


