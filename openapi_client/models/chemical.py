# coding: utf-8

"""
    Toolbox WebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.substance_type import SubstanceType
from typing import Optional, Set
from typing_extensions import Self

class Chemical(BaseModel):
    """
    Chemical
    """ # noqa: E501
    substance_type: Optional[SubstanceType] = Field(default=None, alias="SubstanceType")
    chem_id: Optional[StrictStr] = Field(default=None, description="Id of the chemical in the QSAR Toolbox", alias="ChemId")
    cas: Optional[StrictInt] = Field(default=None, description="CAS# of the chemical", alias="Cas")
    ec_number: Optional[StrictStr] = Field(default=None, description="EC Number", alias="ECNumber")
    smiles: Optional[StrictStr] = Field(default=None, description="SMILES of the chemical", alias="Smiles")
    names: Optional[List[StrictStr]] = Field(default=None, description="Chemical name(s)", alias="Names")
    cas_smiles_relation: Optional[StrictStr] = Field(default=None, description="QA estimation of the CAS-SMILES relation", alias="CasSmilesRelation")
    __properties: ClassVar[List[str]] = ["SubstanceType", "ChemId", "Cas", "ECNumber", "Smiles", "Names", "CasSmilesRelation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Chemical from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ec_number (nullable) is None
        # and model_fields_set contains the field
        if self.ec_number is None and "ec_number" in self.model_fields_set:
            _dict['ECNumber'] = None

        # set to None if smiles (nullable) is None
        # and model_fields_set contains the field
        if self.smiles is None and "smiles" in self.model_fields_set:
            _dict['Smiles'] = None

        # set to None if names (nullable) is None
        # and model_fields_set contains the field
        if self.names is None and "names" in self.model_fields_set:
            _dict['Names'] = None

        # set to None if cas_smiles_relation (nullable) is None
        # and model_fields_set contains the field
        if self.cas_smiles_relation is None and "cas_smiles_relation" in self.model_fields_set:
            _dict['CasSmilesRelation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Chemical from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SubstanceType": obj.get("SubstanceType"),
            "ChemId": obj.get("ChemId"),
            "Cas": obj.get("Cas"),
            "ECNumber": obj.get("ECNumber"),
            "Smiles": obj.get("Smiles"),
            "Names": obj.get("Names"),
            "CasSmilesRelation": obj.get("CasSmilesRelation")
        })
        return _obj


