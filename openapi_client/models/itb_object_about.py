# coding: utf-8

"""
    Toolbox WebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.about_text_pair import AboutTextPair
from typing import Optional, Set
from typing_extensions import Self

class ITbObjectAbout(BaseModel):
    """
    ITbObjectAbout
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    donator: Optional[StrictStr] = Field(default=None, alias="Donator")
    disclaimer: Optional[StrictStr] = Field(default=None, alias="Disclaimer")
    authors: Optional[StrictStr] = Field(default=None, alias="Authors")
    url: Optional[StrictStr] = Field(default=None, alias="Url")
    additional_info: Optional[List[AboutTextPair]] = Field(default=None, alias="AdditionalInfo")
    help_file: Optional[StrictStr] = Field(default=None, alias="HelpFile")
    __properties: ClassVar[List[str]] = ["Name", "Description", "Donator", "Disclaimer", "Authors", "Url", "AdditionalInfo", "HelpFile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ITbObjectAbout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "description",
            "donator",
            "disclaimer",
            "authors",
            "url",
            "additional_info",
            "help_file",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_info (list)
        _items = []
        if self.additional_info:
            for _item in self.additional_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AdditionalInfo'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if donator (nullable) is None
        # and model_fields_set contains the field
        if self.donator is None and "donator" in self.model_fields_set:
            _dict['Donator'] = None

        # set to None if disclaimer (nullable) is None
        # and model_fields_set contains the field
        if self.disclaimer is None and "disclaimer" in self.model_fields_set:
            _dict['Disclaimer'] = None

        # set to None if authors (nullable) is None
        # and model_fields_set contains the field
        if self.authors is None and "authors" in self.model_fields_set:
            _dict['Authors'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['Url'] = None

        # set to None if additional_info (nullable) is None
        # and model_fields_set contains the field
        if self.additional_info is None and "additional_info" in self.model_fields_set:
            _dict['AdditionalInfo'] = None

        # set to None if help_file (nullable) is None
        # and model_fields_set contains the field
        if self.help_file is None and "help_file" in self.model_fields_set:
            _dict['HelpFile'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ITbObjectAbout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "Description": obj.get("Description"),
            "Donator": obj.get("Donator"),
            "Disclaimer": obj.get("Disclaimer"),
            "Authors": obj.get("Authors"),
            "Url": obj.get("Url"),
            "AdditionalInfo": [AboutTextPair.from_dict(_item) for _item in obj["AdditionalInfo"]] if obj.get("AdditionalInfo") is not None else None,
            "HelpFile": obj.get("HelpFile")
        })
        return _obj


